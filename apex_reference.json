{
  "title": "APEX REFERENCE GUIDE",
  "description": "Apex is a strongly typed, object-oriented programming language that allows developers to execute flow and transaction control\nstatements on the Salesforce Platform server, in conjunction with calls to the API. This reference guide includes built-in Apex classes,\ninterfaces, enums, and exceptions, grouped by namespace. It also includes Apex DML statements to insert, update, merge, delete, and\nrestore data in Salesforce.\nFor information on the Apex development process, see Apex Developer Guide.\nNote: In API version 51.0 and earlier, Apex Reference information was included in the Apex Developer Guide in the Apex Language\nReference section.\nIN THIS SECTION:\nApex Release Notes\nUse the Salesforce Release Notes to learn about the most recent updates and changes to Apex.\nApex DML Operations\nYou can perform DML operations using the Apex DML statements or the methods of the Database class. For lead conversion,\nuse the convertLead method of the Database class. There is no DML counterpart for it.\nApexPages Namespace\nThe ApexPages namespace provides classes used in Visualforce controllers.\nAppLauncher Namespace\nThe AppLauncher namespace provides methods for managing the appearance of apps in the App Launcher, including their\nvisibility and sort order.\nApproval Namespace\nThe Approval namespace provides classes and methods for approval processes.\nAuth Namespace\nThe Auth namespace provides an interface and classes for single sign-on into Salesforce and session security management.\nCache Namespace\nThe Cache namespace contains methods for managing the platform cache.\nCanvas Namespace\nThe Canvas namespace provides an interface and classes for canvas apps in Salesforce.\nChatterAnswers Namespace\nThe ChatterAnswers namespace provides an interface for creating Account records.\nCommerceExtension Namespace\nUse the CommerceExtension namespace to define resolution strategies for registered Commerce extensions.\nCommerceOrders Namespace\nThe CommerceOrders namespace provides classes and methods to place orders with integrated pricing, configuration, and\nvalidation.\nCommercePayments Namespace\nUse the CommercePayments namespace to provide a safe and customizable platform for managing customer payments and\nrefunds.\n1\n[/PAGE_1]",
  "metadata": {
    "totalPages": 21,
    "note": "In API version 51.0 and earlier, Apex Reference information was included in the Apex Developer Guide"
  },
  "sections": [
    {
      "name": "ApexPages",
      "description": "The ApexPages namespace provides classes used in Visualforce controllers.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "AppLauncher",
      "description": "The AppLauncher namespace provides methods for managing the appearance of apps in the App Launcher, including their visibility and sort order.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "Approval",
      "description": "The Approval namespace provides classes and methods for approval processes.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "Auth",
      "description": "The Auth namespace provides an interface and classes for single sign-on into Salesforce and session security management.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "Cache",
      "description": "The Cache namespace contains methods for managing the platform cache.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "Canvas",
      "description": "The Canvas namespace provides an interface and classes for canvas apps in Salesforce.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "ChatterAnswers",
      "description": "The ChatterAnswers namespace provides an interface for creating Account records.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "CommerceExtension",
      "description": "Use the CommerceExtension namespace to define resolution strategies for registered Commerce extensions.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "CommerceOrders",
      "description": "The CommerceOrders namespace provides classes and methods to place orders with integrated pricing, configuration, and validation.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "CommercePayments",
      "description": "Use the CommercePayments namespace to provide a safe and customizable platform for managing customer payments and refunds. 1 [/PAGE_1]",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 2,
        "end": 1
      }
    },
    {
      "name": "CommerceTax",
      "description": "Manage the communication between Salesforce and an external tax engine.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "ConnectApi",
      "description": "The ConnectApi namespace (also called Connect in Apex) provides classes for accessing the same data available in Connect",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "Context",
      "description": "The Context namespace provides classes and methods to manage the sharing and consumption of business application data by using Context Service.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "Database",
      "description": "The Database namespace provides classes used with DML operations.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "Datacloud",
      "description": "The Datacloud namespace provides classes and methods for retrieving information about duplicate rules. Duplicate rules let you control whether and when users can save duplicate records within Salesforce.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "DataRetrieval",
      "description": "The DataRetrieval namespace provides classes and methods to record details of customer-agent engagements, as well as transcripts of their conversations.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "DataSource",
      "description": "The DataSource namespace provides the classes for the Apex Connector Framework. Use the Apex Connector Framework to develop a custom adapter for Salesforce Connect. Then connect your Salesforce organization to any data anywhere via the Salesforce",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "DataWeave",
      "description": "The DataWeave namespace provides classes and methods to support the invocation of DataWeave scripts from Apex.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "Dom",
      "description": "The Dom namespace provides classes and methods for parsing and creating XML content.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "EventBus",
      "description": "The EventBus namespace provides classes and methods for platform events and Change Data Capture events.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "ExternalService",
      "description": "The ExternalService namespace provides dynamically generated Apex service interfaces and Apex classes for complex object data types.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "Flow",
      "description": "The Flow namespace provides a class for advanced access to flows from Apex such as from Visualforce controllers and asynchronous",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "Functions",
      "description": "The Functions namespace provides classes and methods used to invoke and manage Salesforce Functions. 2 [/PAGE_2]",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 3,
        "end": 2
      }
    },
    {
      "name": "IndustriesDigitalLending",
      "description": "The industriesDigitalLending namespace provides classes used in the Digital Lending OmniScripts and Integration",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Invocable",
      "description": "The Invocable namespace provides classes for calling invocable actions from Apex.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "IsvPartners",
      "description": "The IsvPartners namespace provides a class associated with Salesforce ISV partner use cases, such as optimizing code, providing great customer trial experiences, and driving feature adoption.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "KbManagement",
      "description": "The KbManagement namespace provides a class for managing knowledge articles.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "LxScheduler",
      "description": "The LxScheduler namespace provides an interface and classes for integrating Salesforce Scheduler with external calendars.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Messaging",
      "description": "The Messaging namespace provides classes and methods for Salesforce outbound and inbound email functionality.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Metadata",
      "description": "The Metadata namespace provides classes and methods for working with custom metadata in Salesforce",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "PlaceQuote",
      "description": "The PlaceQuote namespace provides classes and methods to create or update quotes with pricing preferences and configuration options.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Process",
      "description": "The Process namespace provides an interface and classes for passing data between your organization and a flow.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "QuickAction",
      "description": "The QuickAction namespace provides classes and methods for quick actions.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Reports",
      "description": "The Reports namespace provides classes for accessing the same data as is available in the Salesforce Reports and Dashboards",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "RichMessaging",
      "description": "Provides objects and methods for handling content in enhanced Messaging channels.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Schema",
      "description": "The Schema namespace provides classes and methods for schema metadata information.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Search",
      "description": "The Search namespace provides classes for getting search results and suggestion results.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Sfc",
      "description": "The Sfc namespace contains classes used in Salesforce Files.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 4,
        "end": 3
      }
    },
    {
      "name": "Site",
      "description": "The Site namespace provides an interface for rewriting Sites URLs.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "Slack",
      "description": "The Slack Namespace provides tools designed to accelerate and ease the process of developing Slack apps on the Salesforce platform.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "Support",
      "description": "The Support namespace provides an interface used for Case Feed.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "System",
      "description": "The System namespace provides classes and methods for core Apex functionality.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "TerritoryMgmt",
      "description": "The TerritoryMgmt namespace provides an interface used for territory management.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "TxnSecurity",
      "description": "The TxnSecurity namespace provides an interface used for transaction security.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "UserProvisioning",
      "description": "The UserProvisioning namespace provides methods for monitoring outbound user provisioning requests.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "VisualEditor",
      "description": "The VisualEditor namespace provides classes and methods for interacting with the Lightning App Builder. The classes and methods in this namespace operate on Lightning components, which include Lightning web components and Aura components.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "Wave",
      "description": "The classes in the Wave namespace are part of the CRM Analytics Analytics SDK, designed to facilitate querying CRM Analytics data from Apex code.",
      "subsections": [
        {
          "name": "Database Class",
          "description": "Apex DML Statements Use Data Manipulation Language (DML) statements to insert, update, merge, delete, and restore data in Salesforce. The following Apex DML statements are available: Insert Statement The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert is analogous to the INSERT statement in SQL. Syntax insert sObject insert sObject[] Example The following example inserts an account named 'Acme': Account newAcct = new Account(name = 'Acme'); try { insert newAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Update Statement The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s data. update is analogous to the UPDATE statement in SQL. Syntax update sObject update sObject[] 5 [/PAGE_5] Apex Reference Guide Apex DML Statements Example The following example updates the BillingCity field on a single account named 'Acme': Account a = new Account(Name='Acme2'); insert(a); Account myAcct = [SELECT Id, Name, BillingCity FROM Account WHERE Id = :a.Id]; myAcct.BillingCity = 'San Francisco'; try { update myAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Upsert Statement The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to determine the presence of existing objects, or the ID field if no field is specified. Syntax upsert sObject [opt_field] upsert sObject[] [opt_field] The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce. Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types in the Object Reference for Salesforce. The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the MyExternalID custom field, the statement is: upsert sObjectList Account.Fields.MyExternalId__c; If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record. Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more information, see \u201cCreate Custom Fields\u201d in the Salesforce online help. How Upsert Chooses to Insert or Update Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a record or update an existing one: 6 [/PAGE_6] Apex Reference Guide Apex DML Statements \u2022 If the key isn\u2019t matched, a new object record is created. \u2022 If the key is matched once, the existing object record is updated. \u2022 If the key is matched multiple times, an error is generated and the object record isn\u2019t inserted or updated. Example This example performs an upsert of a list of accounts. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { upsert acctList; } catch (DmlException e) { } This next example performs an upsert of a list of accounts using a foreign key for matching existing records, if any. List<Account> acctList = new List<Account>(); // Fill the accounts list with some accounts try { // Upsert using an external ID field upsert acctList myExtIDField__c; } catch (DmlException e) { } Delete Statement The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s data. delete is analogous to the delete() statement in the SOAP API. Syntax delete sObject delete sObject[] Example The following example deletes all accounts that are named 'DotCom': Account[] doomedAccts = [SELECT Id, Name FROM Account WHERE Name = 'DotCom']; try { delete doomedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. 7 [/PAGE_7] Apex Reference Guide Apex DML Statements Undelete Statement The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL. Syntax undelete sObject | ID undelete sObject[] | ID[] Example The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top level and aggregate relationships, including deleted records and archived activities. Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers' ALL ROWS]; try { undelete savedAccts; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. Merge Statement The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records. Note: This DML operation does not have a matching Database system method. Syntax merge sObject sObject merge sObject sObject[] merge sObject ID merge sObject ID[] The first parameter represents the master record into which the other records are to be merged. The second parameter represents the one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a single sObject record or ID, or as a list of two sObject records or IDs. Example The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record: List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')}; insert ls; Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1]; 8 [/PAGE_8] Apex Reference Guide ApexPages Namespace Account mergeAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme' LIMIT 1]; try { merge masterAcct mergeAcct; } catch (DmlException e) { // Process exception here } Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling. ApexPages Namespace The ApexPages namespace provides classes used in Visualforce controllers. The following are the classes in the ApexPages namespace.",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 5,
        "end": 4
      }
    },
    {
      "name": "ApexPages",
      "description": "The ApexPages namespace provides classes used in Visualforce controllers.",
      "subsections": [
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. Component Class Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. IdeaStandardController Class IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. IdeaStandardSetController Class IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. KnowledgeArticleVersionStandardController Class KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Message Class Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Message Class",
          "description": "Contains validation errors that occur when the user saves the page that uses a standard controller. StandardController Class Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardController Class",
          "description": "Use a StandardController when defining an extension for a standard controller. StandardSetController Class StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "StandardSetController Class",
          "description": "StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce. Action Class You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Action Class",
          "description": "You can use ApexPages.Action to create an action method that you can use in a Visualforce custom controller or controller extension. 9 [/PAGE_9] Apex Reference Guide Action Class Namespace ApexPages Usage For example, you could create a saveOver method on a controller extension that performs a custom save. Instantiation The following code snippet illustrates how to instantiate a new ApexPages.Action object that uses the save action: ApexPages.Action saveAction = new ApexPages.Action('{!save}');",
          "methods": [
            {
              "name": "getExpression",
              "signature": "public String getExpression()",
              "description": "Component Class Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component. childComponents Returns a reference to the child components for the component. 11 [/PAGE_11] Apex Reference Guide Component Class expressions Sets the content of an attribute using the expression language notation. The notation for this is expressions.name_of_attribute. facets Sets the content of a facet to a dynamic component. The notation is facet.name_of_facet. childComponents Returns a reference to the child components for the component. Signature public List <ApexPages.Component> childComponents {get; set;} Property Value Type: List<ApexPages.Component>",
              "parameters": [],
              "return_type": "String"
            }
          ]
        },
        {
          "name": "Component Class",
          "description": "Represents a dynamic Visualforce component in Apex. Namespace ApexPages Dynamic Component Properties The following are properties for Component.",
          "methods": []
        },
        {
          "name": "IdeaStandardController Class",
          "description": "IdeaStandardController objects offer Ideas-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage A method in the IdeaStandardController object is called by and operated on a particular instance of an IdeaStandardController. Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the methods listed in this class, the IdeaStandardController class inherits all the methods associated with the StandardController class. Instantiation An IdeaStandardController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard ideas controller. 13 [/PAGE_13] Apex Reference Guide IdeaStandardController Class Example The following example shows how an IdeaStandardController object can be used in the constructor for a custom list controller. This example provides the framework for manipulating the comment list data before displaying it on a Visualforce page.",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "IdeaStandardController Methods The following are instance methods for IdeaStandardController. 14 [/PAGE_14] Apex Reference Guide IdeaStandardSetController Class",
          "methods": []
        },
        {
          "name": "IdeaStandardSetController Class",
          "description": "IdeaStandardSetController objects offer Ideas-specific functionality in addition to what is provided by the StandardSetController. Namespace ApexPages Usage Note: The IdeaStandardSetController and IdeaStandardController classes are currently available through a limited release program. For information on enabling these classes for your organization, contact your Salesforce representative. In addition to the method listed above, the IdeaStandardSetController class inherits the methods associated with the StandardSetController. Note: The methods inherited from the StandardSetController cannot be used to affect the list of ideas returned by the getIdeaList method. Instantiation An IdeaStandardSetController object cannot be instantiated. An instance can be obtained through a constructor of a custom extension controller when using the standard list controller for ideas. 15 [/PAGE_15] Apex Reference Guide IdeaStandardSetController Class Example: Displaying a Profile Page The following example shows how an IdeaStandardSetController object can be used in the constructor for a custom list controller:",
          "methods": []
        },
        {
          "name": "StandardSetController Class",
          "description": "IdeaStandardSetController Methods The following are instance methods for IdeaStandardSetController.",
          "methods": []
        },
        {
          "name": "KnowledgeArticleVersionStandardController Class",
          "description": "KnowledgeArticleVersionStandardController objects offer article-specific functionality in addition to what is provided by the StandardController. Namespace ApexPages Usage In addition to the method listed above, the KnowledgeArticleVersionStandardController class inherits all the methods associated with StandardController. Note: Though inherited, the edit, delete, and save methods don't serve a function when used with the KnowledgeArticleVersionStandardController class. Example The following example shows how a KnowledgeArticleVersionStandardController object can be used to create a custom extension controller. In this example, you create a class named AgentContributionArticleController that allows customer-support agents to see pre-populated fields on the draft articles they create while closing cases. Prerequisites: 1. Create an article type called FAQ. For instructions, see \u201cCreate Article Types\u201d in the Salesforce online help. 2. Create a text custom field called Details. For instructions, see \u201cAdd Custom Fields to Article Types\u201d in the Salesforce online help. 3. Create a category group called Geography and assign it to a category called USA. For instructions, see \u201cCreate and Modify Category Groups\u201d and \u201cAdd Data Categories to Category Groups\u201d in the Salesforce online help. 4. Create a category group called Topics and assign it a category called Maintenance. /** Custom extension controller for the simplified article edit page that appears when an article is created on the close-case page. */",
          "methods": []
        },
        {
          "name": "StandardController Class",
          "description": "KnowledgeArticleVersionStandardController Constructors The following are constructors for KnowledgeArticleVersionStandardController.",
          "methods": []
        }
      ],
      "pageRange": {
        "start": 10,
        "end": 9
      }
    }
  ],
  "dmlOperations": {
    "statements": [
      {
        "name": "Insert Statement",
        "description": "The insert DML operation adds one or more sObjects, such as individual accounts or contacts, to your organization\u2019s data.insert\nis analogous to the INSERT statement in SQL.",
        "syntax": [
          "insert sObject",
          "insert sObject[]",
          "Example",
          "The following example inserts an account named 'Acme':",
          "Account newAcct = new Account(name = 'Acme');",
          "try {",
          "insert newAcct;",
          "} catch (DmlException e) {",
          "// Process exception here",
          "}",
          "Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling.",
          "Update Statement",
          "The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s",
          "data. update is analogous to the UPDATE statement in SQL.",
          "Syntax",
          "update sObject",
          "update sObject[]",
          "5",
          "[/PAGE_5]"
        ],
        "example": ""
      },
      {
        "name": "Update Statement",
        "description": "The update DML operation modifies one or more existing sObject records, such as individual accounts or contacts, in your organization\u2019s\ndata. update is analogous to the UPDATE statement in SQL.",
        "syntax": [
          "update sObject",
          "update sObject[]",
          "5",
          "[/PAGE_5]"
        ],
        "example": ""
      },
      {
        "name": "Upsert Statement",
        "description": "The upsert DML operation creates new records and updates sObject records within a single statement,using a specified field to\ndetermine the presence of existing objects, or the ID field if no field is specified.",
        "syntax": [
          "upsert sObject [opt_field]",
          "upsert sObject[] [opt_field]",
          "The upsert statement matches the sObjects with existing records by comparing values of one field. If you don\u2019t specify a field when",
          "calling this statement, the upsert statement uses the sObject\u2019s ID to match the sObject with existing records in Salesforce. Alternatively,",
          "you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you",
          "can specify any field that has the idLookup attribute set to true. For example, the Email field of Contact or User has the idLookup",
          "attribute set. To check a field\u2019s attribute, see the Object Reference for Salesforce.",
          "Also, you can use foreign keys to upsert sObject records if they have been set as reference fields. For more information, see Field Types",
          "in the Object Reference for Salesforce.",
          "The optional field parameter, opt_field, is a field token (of type Schema.SObjectField). For example, to specify the",
          "MyExternalID custom field, the statement is:",
          "upsert sObjectList Account.Fields.MyExternalId__c;",
          "If the field used for matching doesn\u2019t have the Unique attribute set, the context user must have the \u201cView All\u201d object-level permission",
          "for the target object or the \u201cView All Data\u201d permission so that upsert doesn\u2019t accidentally insert a duplicate record.",
          "Note: Custom field matching is case-insensitive only if the custom field has the Unique and Treat \"ABC\" and \"abc\" as duplicate",
          "values (case insensitive) attributes selected as part of the field definition. If so, \u201cABC123\u201d is matched with \u201cabc123.\u201d For more",
          "information, see \u201cCreate Custom Fields\u201d in the Salesforce online help.",
          "How Upsert Chooses to Insert or Update",
          "Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a",
          "record or update an existing one:",
          "6",
          "[/PAGE_6]"
        ],
        "example": ""
      },
      {
        "name": "Delete Statement",
        "description": "The delete DML operation deletes one or more existing sObject records, such as individual accounts or contacts, from your organization\u2019s\ndata. delete is analogous to the delete() statement in the SOAP API.",
        "syntax": [
          "delete sObject",
          "delete sObject[]",
          "Example",
          "The following example deletes all accounts that are named 'DotCom':",
          "Account[] doomedAccts = [SELECT Id, Name FROM Account",
          "WHERE Name = 'DotCom'];",
          "try {",
          "delete doomedAccts;",
          "} catch (DmlException e) {",
          "// Process exception here",
          "}",
          "Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling.",
          "7",
          "[/PAGE_7]"
        ],
        "example": ""
      },
      {
        "name": "Undelete Statement",
        "description": "The undelete DML operation restores one or more existing sObject records, such as individual accounts or contacts, from your\norganization\u2019s Recycle Bin. undelete is analogous to the UNDELETE statement in SQL.",
        "syntax": [
          "undelete sObject | ID",
          "undelete sObject[] | ID[]",
          "Example",
          "The following example undeletes an account named 'Universal Containers\u2019. The ALL ROWS keyword queries all rows for both top",
          "level and aggregate relationships, including deleted records and archived activities.",
          "Account[] savedAccts = [SELECT Id, Name FROM Account WHERE Name = 'Universal Containers'",
          "ALL ROWS];",
          "try {",
          "undelete savedAccts;",
          "} catch (DmlException e) {",
          "// Process exception here",
          "}",
          "Note: For more information on processing DmlExceptions, see Bulk DML Exception Handling.",
          "Merge Statement",
          "The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting",
          "any related records.",
          "Note: This DML operation does not have a matching Database system method.",
          "Syntax",
          "merge sObject sObject",
          "merge sObject sObject[]",
          "merge sObject ID",
          "merge sObject ID[]",
          "The first parameter represents the master record into which the other records are to be merged. The second parameter represents the",
          "one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a",
          "single sObject record or ID, or as a list of two sObject records or IDs.",
          "Example",
          "The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record:",
          "List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')};",
          "insert ls;",
          "Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1];",
          "8",
          "[/PAGE_8]"
        ],
        "example": ""
      },
      {
        "name": "Merge Statement",
        "description": "The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting\nany related records.\nNote: This DML operation does not have a matching Database system method.",
        "syntax": [
          "merge sObject sObject",
          "merge sObject sObject[]",
          "merge sObject ID",
          "merge sObject ID[]",
          "The first parameter represents the master record into which the other records are to be merged. The second parameter represents the",
          "one or two other records that should be merged and then deleted. You can pass these other records into the merge statement as a",
          "single sObject record or ID, or as a list of two sObject records or IDs.",
          "Example",
          "The following example merges two accounts named 'Acme Inc.' and 'Acme' into a single record:",
          "List<Account> ls = new List<Account>{new Account(name='Acme Inc.'),new Account(name='Acme')};",
          "insert ls;",
          "Account masterAcct = [SELECT Id, Name FROM Account WHERE Name = 'Acme Inc.' LIMIT 1];",
          "8",
          "[/PAGE_8]"
        ],
        "example": ""
      }
    ]
  }
}